# Generated by Django 5.2.4 on 2025-07-23 08:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('dharma_name', models.CharField(blank=True, help_text='Your Buddhist practice name', max_length=100, verbose_name='Dharma Name')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biography')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('years_practicing', models.PositiveIntegerField(default=0, help_text='How many years have you been practicing Buddhism?', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Years Practicing Buddhism')),
                ('favorite_teacher', models.CharField(blank=True, help_text='Your preferred Buddhist teacher or lineage', max_length=100, verbose_name='Favorite Teacher')),
                ('practice_tradition', models.CharField(blank=True, help_text='e.g., Tibetan Buddhism, Zen, Theravada, etc.', max_length=100, verbose_name='Practice Tradition')),
                ('subscription_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('trial', 'Trial'), ('expired', 'Expired')], default='trial', max_length=20, verbose_name='Subscription Status')),
                ('subscription_plan', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('lifetime', 'Lifetime')], default='basic', max_length=20, verbose_name='Subscription Plan')),
                ('subscription_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Subscription Start Date')),
                ('subscription_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Subscription End Date')),
                ('preferred_language', models.CharField(choices=[('pt', 'PortuguÃªs'), ('en', 'English')], default='en', max_length=5, verbose_name='Preferred Language')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push Notifications')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Email Verified')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=10, verbose_name='Theme')),
                ('autoplay_next', models.BooleanField(default=True, verbose_name='Autoplay Next Track')),
                ('download_quality', models.CharField(choices=[('low', 'Low (64kbps)'), ('medium', 'Medium (128kbps)'), ('high', 'High (320kbps)')], default='medium', max_length=10, verbose_name='Download Quality')),
                ('playback_speed', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)], verbose_name='Playback Speed')),
                ('show_transcripts', models.BooleanField(default=True, verbose_name='Show Transcripts by Default')),
                ('preferred_session_length', models.PositiveIntegerField(default=30, verbose_name='Preferred Session Length (minutes)')),
                ('session_reminders', models.BooleanField(default=True, verbose_name='Daily Session Reminders')),
                ('reminder_time', models.TimeField(default='09:00', verbose_name='Reminder Time')),
                ('retreat_notifications', models.BooleanField(default=True, verbose_name='Retreat Notifications')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10, verbose_name='Profile Visibility')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Preferences',
                'verbose_name_plural': 'User Preferences',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('track_play', 'Track Play'), ('track_complete', 'Track Complete'), ('bookmark_create', 'Bookmark Created'), ('retreat_join', 'Retreat Joined'), ('profile_update', 'Profile Updated')], max_length=20, verbose_name='Activity Type')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadata')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', '-timestamp'], name='accounts_us_user_id_5da0f6_idx'), models.Index(fields=['activity_type', '-timestamp'], name='accounts_us_activit_f5b46e_idx')],
            },
        ),
    ]
